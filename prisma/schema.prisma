generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_POSTGRES_URL")
  directUrl = env("DATABASE_PRISMA_DATABASE_URL")
}

model User {
  id                     String                   @id @default(cuid())
  email                  String                   @unique
  name                   String
  password               String
  role                   Role                     @default(USER)
  phoneNumber            String?
  address                String?
  city                   String?
  state                  String?
  pincode                String?
  dateOfBirth            DateTime?
  aadharNumber           String?                  @unique
  barrelsRemaining       Int                      @default(12)
  defaultVendorId        String?
  isActive               Boolean                  @default(true)
  isBlocked              Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  bookings               Booking[]
  logs                   Log[]
  notificationReadStatus NotificationReadStatus[]
  notifications          Notification[]
  defaultVendor          Agency?                  @relation("UserDefaultVendor", fields: [defaultVendorId], references: [id])

  @@map("users")
}

model Agency {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String
  password        String
  businessName    String
  businessAddress String
  city            String
  state           String
  pincode         String
  contactNumber   String
  alternateNumber String?
  gstNumber       String?   @unique
  licenseNumber   String    @unique
  panNumber       String?   @unique
  cylinderPrice   Float     @default(800.0)
  deliveryRadius  Int       @default(10)
  minOrderAmount  Float     @default(0.0)
  deliveryCharges Float     @default(0.0)
  workingHours    String    @default("9:00 AM - 6:00 PM")
  establishedYear Int?
  description     String?
  isActive        Boolean   @default(true)
  isVerified      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  bookings        Booking[]
  defaultUsers    User[]    @relation("UserDefaultVendor")

  @@map("agencies")
}

model Booking {
  id                   String        @id @default(cuid())
  userId               String
  agencyId             String
  status               BookingStatus @default(PENDING)
  paymentMethod        PaymentMethod @default(COD)
  paymentStatus        PaymentStatus @default(PENDING)
  amount               Float?
  isExtra              Boolean       @default(false)
  approvedAt           DateTime?
  rejectedAt           DateTime?
  rejectionReason      String?
  adminRejectionReason String?
  scheduledFor         DateTime?
  deliveredAt          DateTime?
  deliveryNotes        String?
  deliveryAddress      String?
  contactNumber        String?
  notes                String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  agency               Agency        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment              Payment?

  @@map("bookings")
}

model Notification {
  id             String                   @id @default(cuid())
  title          String
  message        String
  isActive       Boolean                  @default(true)
  userId         String?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  userReadStatus NotificationReadStatus[]
  user           User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model NotificationReadStatus {
  userId         String
  notificationId String
  createdAt      DateTime     @default(now())
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, notificationId])
  @@map("notification_read_status")
}

model Log {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("logs")
}

model Payment {
  id                String        @id @default(cuid())
  bookingId         String        @unique
  razorpayOrderId   String        @unique
  razorpayPaymentId String?       @unique
  razorpaySignature String?
  amount            Float
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  paymentMethod     String?
  failureReason     String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  booking           Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Role {
  USER
  AGENCY
  ADMIN
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  DELIVERED
}

enum PaymentMethod {
  COD
  ONLINE
  PAYTM_QR
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
